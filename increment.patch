From 95112e086102b5445f0940fbd0c3d73953d167c6 Mon Sep 17 00:00:00 2001
From: avoevodin8888 <avoevodin8888@gmail.com>
Date: Thu, 29 Sep 2022 17:17:57 +0000
Subject: [PATCH] incr patch

---
 Grammar/Grammar     |  5 ++++-
 Grammar/Tokens      |  2 ++
 Grammar/python.gram |  7 ++++++-
 Parser/Python.asdl  |  2 ++
 Python/ast.c        | 51 ++++++++++++++++++++++++++++++++++++++++++++++++++-
 Python/compile.c    |  3 +++
 Python/symtable.c   |  6 ++++++
 7 files changed, 73 insertions(+), 3 deletions(-)

diff --git a/Grammar/Grammar b/Grammar/Grammar
index 170518a..35c6c19 100644
--- a/Grammar/Grammar
+++ b/Grammar/Grammar
@@ -83,13 +83,16 @@ simple_stmt: small_stmt (';' small_stmt)* [';'] NEWLINE
 small_stmt: (expr_stmt | del_stmt | pass_stmt | flow_stmt |
              import_stmt | global_stmt | nonlocal_stmt | assert_stmt)
 expr_stmt: testlist_star_expr (annassign | augassign (yield_expr|testlist) |
-                     [('=' (yield_expr|testlist_star_expr))+ [TYPE_COMMENT]] )
+                     [('=' (yield_expr|testlist_star_expr))+ [TYPE_COMMENT]] |
+                     incr_stmt | decr_stmt)
 annassign: ':' test ['=' (yield_expr|testlist_star_expr)]
 testlist_star_expr: (test|star_expr) (',' (test|star_expr))* [',']
 augassign: ('+=' | '-=' | '*=' | '@=' | '/=' | '%=' | '&=' | '|=' | '^=' |
             '<<=' | '>>=' | '**=' | '//=')
 # For normal and annotated assignments, additional restrictions enforced by the interpreter
 del_stmt: 'del' exprlist
+incr_stmt: '++'
+decr_stmt: '--'
 pass_stmt: 'pass'
 flow_stmt: break_stmt | continue_stmt | return_stmt | raise_stmt | yield_stmt
 break_stmt: 'break'
diff --git a/Grammar/Tokens b/Grammar/Tokens
index 9de2da5..a6c25d4 100644
--- a/Grammar/Tokens
+++ b/Grammar/Tokens
@@ -53,6 +53,8 @@ ATEQUAL                 '@='
 RARROW                  '->'
 ELLIPSIS                '...'
 COLONEQUAL              ':='
+INCREMENT               '++'
+DECREMENT               '--'
 
 OP
 AWAIT
diff --git a/Grammar/python.gram b/Grammar/python.gram
index 38405b7..f34689b 100644
--- a/Grammar/python.gram
+++ b/Grammar/python.gram
@@ -1,4 +1,4 @@
-# PEG grammar for Python
+#/ PEG grammar for Python
 
 @trailer '''
 void *
@@ -59,6 +59,7 @@ simple_stmt[asdl_seq*]:
 # will throw a SyntaxError.
 small_stmt[stmt_ty] (memo):
     | assignment
+    | a=NAME incr_stmt { _Py_Increment(a, EXTRA) }
     | e=star_expressions { _Py_Expr(e, EXTRA) }
     | &'return' return_stmt
     | &('import' | 'from') import_stmt
@@ -112,6 +113,10 @@ augassign[AugOperator*]:
     | '**=' { _PyPegen_augoperator(p, Pow) }
     | '//=' { _PyPegen_augoperator(p, FloorDiv) }
 
+
+incr_stmt[stmt_ty]: 
+    | '++'
+
 global_stmt[stmt_ty]: 'global' a=','.NAME+ {
     _Py_Global(CHECK(_PyPegen_map_names_to_ids(p, a)), EXTRA) }
 nonlocal_stmt[stmt_ty]: 'nonlocal' a=','.NAME+ {
diff --git a/Parser/Python.asdl b/Parser/Python.asdl
index 889712b..828592a 100644
--- a/Parser/Python.asdl
+++ b/Parser/Python.asdl
@@ -27,6 +27,8 @@ module Python
           | AugAssign(expr target, operator op, expr value)
           -- 'simple' indicates that we annotate simple name without parens
           | AnnAssign(expr target, expr annotation, expr? value, int simple)
+          | Increment(expr target)
+          | Decrement(expr target)
 
           -- use 'orelse' because else is a keyword in target languages
           | For(expr target, expr iter, stmt* body, stmt* orelse, string? type_comment)
diff --git a/Python/ast.c b/Python/ast.c
index 6dd7059..c62f024 100644
--- a/Python/ast.c
+++ b/Python/ast.c
@@ -372,6 +372,8 @@ validate_stmt(stmt_ty stmt)
     case AugAssign_kind:
         return validate_expr(stmt->v.AugAssign.target, Store) &&
             validate_expr(stmt->v.AugAssign.value, Load);
+    case Increment_kind:
+        return validate_expr(stmt->v.Increment.target, Store);
     case AnnAssign_kind:
         if (stmt->v.AnnAssign.target->kind != Name_kind &&
             stmt->v.AnnAssign.simple) {
@@ -3170,7 +3172,6 @@ ast_for_expr_stmt(struct compiling *c, const node *n)
        test: ... here starts the operator precedence dance
      */
     int num = NCH(n);
-
     if (num == 1) {
         expr_ty e = ast_for_testlist(c, CHILD(n, 0));
         if (!e)
@@ -3221,6 +3222,54 @@ ast_for_expr_stmt(struct compiling *c, const node *n)
         return AugAssign(expr1, newoperator, expr2, LINENO(n), n->n_col_offset,
                          n->n_end_lineno, n->n_end_col_offset, c->c_arena);
     }
+    else if ((TYPE(CHILD(n, 1)) == incr_stmt) || (TYPE(CHILD(n, 1)) == decr_stmt)) {
+        expr_ty expr1, expr2;
+        operator_ty newoperator;
+        node *ch = CHILD(n, 0);
+        newoperator = Add;
+
+        switch (TYPE(CHILD(n, 1))) {
+            case incr_stmt:
+                newoperator = Add;
+                break;
+            case decr_stmt:
+                newoperator = Sub;
+                break;
+        }
+        
+        expr1 = ast_for_testlist(c, ch);
+        if (!expr1)
+            return NULL;
+        
+        switch (expr1->kind) {
+            case Name_kind:
+            case Attribute_kind:
+            case Subscript_kind:
+                break;
+            default:
+                ast_error(c, ch, "'%s' is an illegal expression for increment/decrement",
+                        get_expr_name(expr1));
+                return NULL;
+        }
+
+        if(!set_context(c, expr1, Store, ch)) {
+            return NULL;
+        }
+        PyObject *pynum;
+        pynum = parsenumber(c, "1");
+        if (!pynum)
+            return NULL;
+
+        if (PyArena_AddPyObject(c->c_arena, pynum) < 0) {
+            Py_DECREF(pynum);
+            return NULL;
+        }
+        expr2 = Constant(pynum, NULL, LINENO(n), n->n_col_offset,
+                       n->n_end_lineno, n->n_end_col_offset, c->c_arena);
+        return AugAssign(expr1, newoperator, expr2, LINENO(n), n->n_col_offset,
+                        n->n_end_lineno, n->n_end_col_offset, c->c_arena);
+        
+    }
     else if (TYPE(CHILD(n, 1)) == annassign) {
         expr_ty expr1, expr2, expr3;
         node *ch = CHILD(n, 0);
diff --git a/Python/compile.c b/Python/compile.c
index 28003b6..e1dbd03 100644
--- a/Python/compile.c
+++ b/Python/compile.c
@@ -3411,6 +3411,9 @@ compiler_visit_stmt(struct compiler *c, stmt_ty s)
         return compiler_augassign(c, s);
     case AnnAssign_kind:
         return compiler_annassign(c, s);
+    case Increment_kind:
+    case Decrement_kind:
+        break;
     case For_kind:
         return compiler_for(c, s);
     case While_kind:
diff --git a/Python/symtable.c b/Python/symtable.c
index d192f31..88d9430 100644
--- a/Python/symtable.c
+++ b/Python/symtable.c
@@ -1310,6 +1310,12 @@ symtable_visit_stmt(struct symtable *st, stmt_ty s)
         if (s->v.Assert.msg)
             VISIT(st, expr, s->v.Assert.msg);
         break;
+    case Increment_kind:
+        VISIT(st, expr, s->v.Increment.target);
+        break;
+    case Decrement_kind:
+        VISIT(st, expr, s->v.Decrement.target);
+        break;
     case Import_kind:
         VISIT_SEQ(st, alias, s->v.Import.names);
         break;
-- 
1.8.3.1

